{"ast":null,"code":"var _jsxFileName = \"D:\\\\EVA\\\\EVA-SCORM\\\\src\\\\components\\\\textoConInputs.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextoConInputs = () => {\n  _s();\n  const [respuestas, setRespuestas] = useState({});\n  const [resultado, setResultado] = useState(\"\");\n  const textoCompleto = \"La __1__ es la ciencia que estudia los seres vivos. Se enfoca en el __2__ de los organismos, su __3__, su __4__ y las interacciones entre ellos. Los __5__ son las unidades fundamentales de la vida, y pueden ser tan pequeños como una célula o tan grandes como un organismo completo. A lo largo de la historia, la __1__ ha hecho grandes avances en nuestro entendimiento de la diversidad y complejidad de la vida en la __6__. Sin embargo, aún hay mucho por descubrir y entender.\";\n  const palabras = textoCompleto.split(/\\b/); // Utilizar \\b para separar por límites de palabra\n\n  const respuestasCorrectas = {\n    1: \"biología\",\n    2: \"estudio\",\n    3: \"estructura\",\n    4: \"función\",\n    5: \"organismos\",\n    6: \"biología\",\n    7: \"Tierra\"\n  };\n  const compararRespuestas = () => {\n    const respuestasUsuario = Object.values(respuestas).sort((a, b) => a - b);\n    const respuestasCorrectasOrdenadas = Object.entries(respuestasCorrectas).sort((a, b) => a[0] - b[0]).map(entry => entry[1]);\n    const esCorrecto = respuestasUsuario.every((respuesta, indice) => respuesta === respuestasCorrectasOrdenadas[indice]);\n    if (esCorrecto) {\n      setResultado(\"¡Respuestas correctas!\");\n    } else {\n      setResultado(\"Respuestas incorrectas\");\n    }\n    if (esCorrecto) {\n      console.log(\"¡Respuestas correctas!\");\n    } else {\n      console.log(\"Respuestas incorrectas\");\n    }\n  };\n  const guardar = () => {\n    compararRespuestas();\n    console.log(respuestas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [palabras.map((palabra, indice) => {\n      if (/^__\\w+__$/.test(palabra)) {\n        const palabraFaltante = palabra.replace(/_/g, '');\n        return /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: respuestas[indice] || '',\n          onChange: e => setRespuestas({\n            ...respuestas,\n            [indice]: e.target.value\n          })\n        }, indice, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: palabra\n      }, indice, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 18\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: guardar,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: resultado\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n};\n_s(TextoConInputs, \"OF9JDZwiz0IZfLyVxFlHx4wo6hM=\");\n_c = TextoConInputs;\nexport default TextoConInputs;\nvar _c;\n$RefreshReg$(_c, \"TextoConInputs\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TextoConInputs","_s","respuestas","setRespuestas","resultado","setResultado","textoCompleto","palabras","split","respuestasCorrectas","compararRespuestas","respuestasUsuario","Object","values","sort","a","b","respuestasCorrectasOrdenadas","entries","map","entry","esCorrecto","every","respuesta","indice","console","log","guardar","children","palabra","test","palabraFaltante","replace","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/EVA/EVA-SCORM/src/components/textoConInputs.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst TextoConInputs = () => {\r\n    const [respuestas, setRespuestas] = useState({});\r\n    const [resultado, setResultado] = useState(\"\");\r\n    const textoCompleto = \"La __1__ es la ciencia que estudia los seres vivos. Se enfoca en el __2__ de los organismos, su __3__, su __4__ y las interacciones entre ellos. Los __5__ son las unidades fundamentales de la vida, y pueden ser tan pequeños como una célula o tan grandes como un organismo completo. A lo largo de la historia, la __1__ ha hecho grandes avances en nuestro entendimiento de la diversidad y complejidad de la vida en la __6__. Sin embargo, aún hay mucho por descubrir y entender.\";\r\n    const palabras = textoCompleto.split(/\\b/); // Utilizar \\b para separar por límites de palabra\r\n\r\n      const respuestasCorrectas = {\r\n        1: \"biología\",\r\n        2: \"estudio\",\r\n        3: \"estructura\",\r\n        4: \"función\",\r\n        5: \"organismos\",\r\n        6: \"biología\",\r\n        7: \"Tierra\"\r\n      };\r\n\r\n      const compararRespuestas = () => {\r\n        \r\n        const respuestasUsuario = Object.values(respuestas).sort((a, b) => a - b);\r\n        \r\n        \r\n        const respuestasCorrectasOrdenadas = Object.entries(respuestasCorrectas)\r\n          .sort((a, b) => a[0] - b[0])\r\n          .map((entry) => entry[1]);\r\n        \r\n\r\n        const esCorrecto = respuestasUsuario.every((respuesta, indice) => respuesta === respuestasCorrectasOrdenadas[indice]);\r\n      \r\n        if (esCorrecto) {\r\n            setResultado(\"¡Respuestas correctas!\");\r\n          } else {\r\n            setResultado(\"Respuestas incorrectas\");\r\n          }\r\n        if (esCorrecto) {\r\n           console.log(\"¡Respuestas correctas!\");\r\n         } else {\r\n          console.log(\"Respuestas incorrectas\");\r\n        }\r\n      };\r\n      \r\n    \r\n    const guardar = () => {\r\n        compararRespuestas();\r\n        console.log(respuestas);\r\n    }\r\n  \r\n    return (\r\n      <div>\r\n        {palabras.map((palabra, indice) => {\r\n          if (/^__\\w+__$/.test(palabra)) { \r\n            const palabraFaltante = palabra.replace(/_/g, '');\r\n            return (\r\n              <input\r\n                key={indice}\r\n                type=\"text\"\r\n                value={respuestas[indice] || ''}\r\n                onChange={(e) => setRespuestas({...respuestas, [indice]: e.target.value})}\r\n              />\r\n            );\r\n          }\r\n          return <span key={indice}>{palabra}</span>;\r\n        })}\r\n        <button onClick={guardar}>Enviar</button>\r\n        <div>{resultado}</div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default TextoConInputs;\r\n  \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}